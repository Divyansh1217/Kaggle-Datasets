{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8294177,"sourceType":"datasetVersion","datasetId":4927342}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-03T13:07:28.465341Z","iopub.execute_input":"2024-05-03T13:07:28.465694Z","iopub.status.idle":"2024-05-03T13:07:29.644466Z","shell.execute_reply.started":"2024-05-03T13:07:28.465666Z","shell.execute_reply":"2024-05-03T13:07:29.643272Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/weather-of-albania-last-three-years/data_weather/elbasan/elbasan2021.csv\n/kaggle/input/weather-of-albania-last-three-years/data_weather/elbasan/elbasan2023.csv\n/kaggle/input/weather-of-albania-last-three-years/data_weather/elbasan/elbasan2022.csv\n/kaggle/input/weather-of-albania-last-three-years/data_weather/vlore/vlore2021.csv\n/kaggle/input/weather-of-albania-last-three-years/data_weather/vlore/vlore2022.csv\n/kaggle/input/weather-of-albania-last-three-years/data_weather/vlore/vlore2023.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df1=pd.read_csv(\"/kaggle/input/weather-of-albania-last-three-years/data_weather/elbasan/elbasan2021.csv\")\ndf1.tail()\ndf2=pd.read_csv(\"/kaggle/input/weather-of-albania-last-three-years/data_weather/elbasan/elbasan2022.csv\")\ndf3=pd.read_csv(\"/kaggle/input/weather-of-albania-last-three-years/data_weather/elbasan/elbasan2023.csv\")\ndata_el=pd.concat([df1,df2,df3])\ndata_el.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:23:41.689094Z","iopub.execute_input":"2024-05-03T13:23:41.689497Z","iopub.status.idle":"2024-05-03T13:23:41.725015Z","shell.execute_reply.started":"2024-05-03T13:23:41.689467Z","shell.execute_reply":"2024-05-03T13:23:41.723844Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"         date  tavg  tmin  tmax  prcp  snow   wdir  wspd  wpgt    pres  tsun\n0  2021-01-01   NaN   NaN   NaN   NaN   NaN    NaN   NaN   NaN     NaN   NaN\n1  2021-01-02  11.2   6.0  18.4   0.0   NaN   91.0   9.8   NaN  1016.3   NaN\n2  2021-01-03  12.3   7.4  18.2   2.1   NaN  130.0   8.0   NaN  1014.5   NaN\n3  2021-01-04   9.2   7.5  11.4  14.9   NaN  132.0   5.8   NaN  1010.9   NaN\n4  2021-01-05   9.8   7.0  15.2   2.2   NaN  135.0   8.6   NaN  1014.8   NaN","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>tavg</th>\n      <th>tmin</th>\n      <th>tmax</th>\n      <th>prcp</th>\n      <th>snow</th>\n      <th>wdir</th>\n      <th>wspd</th>\n      <th>wpgt</th>\n      <th>pres</th>\n      <th>tsun</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-01-01</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-01-02</td>\n      <td>11.2</td>\n      <td>6.0</td>\n      <td>18.4</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>91.0</td>\n      <td>9.8</td>\n      <td>NaN</td>\n      <td>1016.3</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-01-03</td>\n      <td>12.3</td>\n      <td>7.4</td>\n      <td>18.2</td>\n      <td>2.1</td>\n      <td>NaN</td>\n      <td>130.0</td>\n      <td>8.0</td>\n      <td>NaN</td>\n      <td>1014.5</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-01-04</td>\n      <td>9.2</td>\n      <td>7.5</td>\n      <td>11.4</td>\n      <td>14.9</td>\n      <td>NaN</td>\n      <td>132.0</td>\n      <td>5.8</td>\n      <td>NaN</td>\n      <td>1010.9</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-01-05</td>\n      <td>9.8</td>\n      <td>7.0</td>\n      <td>15.2</td>\n      <td>2.2</td>\n      <td>NaN</td>\n      <td>135.0</td>\n      <td>8.6</td>\n      <td>NaN</td>\n      <td>1014.8</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df1=pd.read_csv(\"/kaggle/input/weather-of-albania-last-three-years/data_weather/vlore/vlore2021.csv\")\ndf2=pd.read_csv(\"/kaggle/input/weather-of-albania-last-three-years/data_weather/vlore/vlore2022.csv\")\ndf3=pd.read_csv(\"/kaggle/input/weather-of-albania-last-three-years/data_weather/vlore/vlore2023.csv\")\ndata_vl=pd.concat([df1,df2,df3])\ndata_vl.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:16:25.919431Z","iopub.execute_input":"2024-05-03T13:16:25.919810Z","iopub.status.idle":"2024-05-03T13:16:25.964591Z","shell.execute_reply.started":"2024-05-03T13:16:25.919782Z","shell.execute_reply":"2024-05-03T13:16:25.963771Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"         date  tavg  tmin  tmax  prcp  snow   wdir  wspd  wpgt    pres  tsun\n0  2021-01-01   NaN   NaN   NaN   NaN   NaN    NaN   NaN   NaN     NaN   NaN\n1  2021-01-02  11.0   7.4  17.0   0.7   NaN   99.0   9.2   NaN  1015.9   NaN\n2  2021-01-03  11.9   7.9  16.6   2.3   NaN  143.0   9.8   NaN  1014.4   NaN\n3  2021-01-04   9.1   7.3  11.5  27.8   NaN   56.0   7.8   NaN  1010.9   NaN\n4  2021-01-05   9.6   5.5  15.3   0.4   NaN  139.0   8.2   NaN  1014.8   NaN","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>tavg</th>\n      <th>tmin</th>\n      <th>tmax</th>\n      <th>prcp</th>\n      <th>snow</th>\n      <th>wdir</th>\n      <th>wspd</th>\n      <th>wpgt</th>\n      <th>pres</th>\n      <th>tsun</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-01-01</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-01-02</td>\n      <td>11.0</td>\n      <td>7.4</td>\n      <td>17.0</td>\n      <td>0.7</td>\n      <td>NaN</td>\n      <td>99.0</td>\n      <td>9.2</td>\n      <td>NaN</td>\n      <td>1015.9</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-01-03</td>\n      <td>11.9</td>\n      <td>7.9</td>\n      <td>16.6</td>\n      <td>2.3</td>\n      <td>NaN</td>\n      <td>143.0</td>\n      <td>9.8</td>\n      <td>NaN</td>\n      <td>1014.4</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-01-04</td>\n      <td>9.1</td>\n      <td>7.3</td>\n      <td>11.5</td>\n      <td>27.8</td>\n      <td>NaN</td>\n      <td>56.0</td>\n      <td>7.8</td>\n      <td>NaN</td>\n      <td>1010.9</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-01-05</td>\n      <td>9.6</td>\n      <td>5.5</td>\n      <td>15.3</td>\n      <td>0.4</td>\n      <td>NaN</td>\n      <td>139.0</td>\n      <td>8.2</td>\n      <td>NaN</td>\n      <td>1014.8</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data_el.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:16:52.133095Z","iopub.execute_input":"2024-05-03T13:16:52.133812Z","iopub.status.idle":"2024-05-03T13:16:52.160705Z","shell.execute_reply.started":"2024-05-03T13:16:52.133768Z","shell.execute_reply":"2024-05-03T13:16:52.159479Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1095 entries, 0 to 364\nData columns (total 11 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   date    1095 non-null   object \n 1   tavg    1090 non-null   float64\n 2   tmin    1090 non-null   float64\n 3   tmax    1090 non-null   float64\n 4   prcp    1090 non-null   float64\n 5   snow    0 non-null      float64\n 6   wdir    1090 non-null   float64\n 7   wspd    1090 non-null   float64\n 8   wpgt    0 non-null      float64\n 9   pres    1090 non-null   float64\n 10  tsun    0 non-null      float64\ndtypes: float64(10), object(1)\nmemory usage: 102.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"data_el.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:26:37.563764Z","iopub.execute_input":"2024-05-03T13:26:37.564909Z","iopub.status.idle":"2024-05-03T13:26:37.573942Z","shell.execute_reply.started":"2024-05-03T13:26:37.564842Z","shell.execute_reply":"2024-05-03T13:26:37.572711Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"date    0\ntavg    0\ntmin    0\ntmax    0\nprcp    0\nwdir    0\nwspd    0\npres    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"data_vl.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:17:44.264517Z","iopub.execute_input":"2024-05-03T13:17:44.264938Z","iopub.status.idle":"2024-05-03T13:17:44.276678Z","shell.execute_reply.started":"2024-05-03T13:17:44.264899Z","shell.execute_reply":"2024-05-03T13:17:44.275777Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1095 entries, 0 to 364\nData columns (total 11 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   date    1095 non-null   object \n 1   tavg    1090 non-null   float64\n 2   tmin    1090 non-null   float64\n 3   tmax    1090 non-null   float64\n 4   prcp    1090 non-null   float64\n 5   snow    0 non-null      float64\n 6   wdir    1090 non-null   float64\n 7   wspd    1090 non-null   float64\n 8   wpgt    0 non-null      float64\n 9   pres    1090 non-null   float64\n 10  tsun    0 non-null      float64\ndtypes: float64(10), object(1)\nmemory usage: 102.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"data_vl.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:27:30.275893Z","iopub.execute_input":"2024-05-03T13:27:30.276284Z","iopub.status.idle":"2024-05-03T13:27:30.285808Z","shell.execute_reply.started":"2024-05-03T13:27:30.276255Z","shell.execute_reply":"2024-05-03T13:27:30.284748Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"date    0\ntavg    0\ntmin    0\ntmax    0\nprcp    0\nwdir    0\nwspd    0\npres    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"data_el=data_el.drop(['snow','wpgt','tsun'],axis=1)\ni=data[data.date=='2021-01-01'].index\ndata_el=data_el.drop(i)\ndata_el.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:23:46.680079Z","iopub.execute_input":"2024-05-03T13:23:46.680467Z","iopub.status.idle":"2024-05-03T13:23:46.705839Z","shell.execute_reply.started":"2024-05-03T13:23:46.680438Z","shell.execute_reply":"2024-05-03T13:23:46.704676Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"         date  tavg  tmin  tmax  prcp   wdir  wspd    pres\n1  2021-01-02  11.2   6.0  18.4   0.0   91.0   9.8  1016.3\n2  2021-01-03  12.3   7.4  18.2   2.1  130.0   8.0  1014.5\n3  2021-01-04   9.2   7.5  11.4  14.9  132.0   5.8  1010.9\n4  2021-01-05   9.8   7.0  15.2   2.2  135.0   8.6  1014.8\n5  2021-01-06  10.6   9.9  12.0  13.3  141.0  13.9  1016.7","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>tavg</th>\n      <th>tmin</th>\n      <th>tmax</th>\n      <th>prcp</th>\n      <th>wdir</th>\n      <th>wspd</th>\n      <th>pres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2021-01-02</td>\n      <td>11.2</td>\n      <td>6.0</td>\n      <td>18.4</td>\n      <td>0.0</td>\n      <td>91.0</td>\n      <td>9.8</td>\n      <td>1016.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-01-03</td>\n      <td>12.3</td>\n      <td>7.4</td>\n      <td>18.2</td>\n      <td>2.1</td>\n      <td>130.0</td>\n      <td>8.0</td>\n      <td>1014.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-01-04</td>\n      <td>9.2</td>\n      <td>7.5</td>\n      <td>11.4</td>\n      <td>14.9</td>\n      <td>132.0</td>\n      <td>5.8</td>\n      <td>1010.9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-01-05</td>\n      <td>9.8</td>\n      <td>7.0</td>\n      <td>15.2</td>\n      <td>2.2</td>\n      <td>135.0</td>\n      <td>8.6</td>\n      <td>1014.8</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2021-01-06</td>\n      <td>10.6</td>\n      <td>9.9</td>\n      <td>12.0</td>\n      <td>13.3</td>\n      <td>141.0</td>\n      <td>13.9</td>\n      <td>1016.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data_el=data_el.dropna()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:26:32.900847Z","iopub.execute_input":"2024-05-03T13:26:32.901330Z","iopub.status.idle":"2024-05-03T13:26:32.907961Z","shell.execute_reply.started":"2024-05-03T13:26:32.901294Z","shell.execute_reply":"2024-05-03T13:26:32.906551Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"data_vl=data_vl.drop(['snow','wpgt','tsun'],axis=1)\ndata_vl=data_vl.dropna()\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T13:27:23.838525Z","iopub.execute_input":"2024-05-03T13:27:23.838900Z","iopub.status.idle":"2024-05-03T13:27:23.859294Z","shell.execute_reply.started":"2024-05-03T13:27:23.838857Z","shell.execute_reply":"2024-05-03T13:27:23.858291Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"         date  tavg  tmin  tmax  prcp   wdir  wspd    pres\n1  2021-01-02  11.2   6.0  18.4   0.0   91.0   9.8  1016.3\n2  2021-01-03  12.3   7.4  18.2   2.1  130.0   8.0  1014.5\n3  2021-01-04   9.2   7.5  11.4  14.9  132.0   5.8  1010.9\n4  2021-01-05   9.8   7.0  15.2   2.2  135.0   8.6  1014.8\n5  2021-01-06  10.6   9.9  12.0  13.3  141.0  13.9  1016.7","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>tavg</th>\n      <th>tmin</th>\n      <th>tmax</th>\n      <th>prcp</th>\n      <th>wdir</th>\n      <th>wspd</th>\n      <th>pres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2021-01-02</td>\n      <td>11.2</td>\n      <td>6.0</td>\n      <td>18.4</td>\n      <td>0.0</td>\n      <td>91.0</td>\n      <td>9.8</td>\n      <td>1016.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-01-03</td>\n      <td>12.3</td>\n      <td>7.4</td>\n      <td>18.2</td>\n      <td>2.1</td>\n      <td>130.0</td>\n      <td>8.0</td>\n      <td>1014.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-01-04</td>\n      <td>9.2</td>\n      <td>7.5</td>\n      <td>11.4</td>\n      <td>14.9</td>\n      <td>132.0</td>\n      <td>5.8</td>\n      <td>1010.9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-01-05</td>\n      <td>9.8</td>\n      <td>7.0</td>\n      <td>15.2</td>\n      <td>2.2</td>\n      <td>135.0</td>\n      <td>8.6</td>\n      <td>1014.8</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2021-01-06</td>\n      <td>10.6</td>\n      <td>9.9</td>\n      <td>12.0</td>\n      <td>13.3</td>\n      <td>141.0</td>\n      <td>13.9</td>\n      <td>1016.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_percentage_error as mape\nx=data_el.drop([\"date\",\"pres\"],axis=1)\ny=data_el[['pres']]\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)\nscaler = StandardScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)\nmodels={\n    \"Xgboost\":XGBRegressor(n_estimators=100),\n    \"RandomForest\":RandomForestRegressor(n_estimators=200),\n    \"LinearRegressor\":LinearRegression(),\n    \"GradientBoost\":GradientBoostingRegressor(learning_rate=0.085)\n}\nfor name,model in models.items():\n    model.fit(x_train,y_train)\n    pre=model.predict(x_test)\n    accuracy=model.score(x_test,y_test)\n    score=r2_score(y_test,pre)\n    \n    print(f\"Model: {name}\")\n    print(f\"Accuracy: {accuracy:.2f}\")\n    print(f\"R2_Score:{score:.1f}\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-05-03T14:02:22.062166Z","iopub.execute_input":"2024-05-03T14:02:22.062610Z","iopub.status.idle":"2024-05-03T14:02:23.308369Z","shell.execute_reply.started":"2024-05-03T14:02:22.062575Z","shell.execute_reply":"2024-05-03T14:02:23.307078Z"},"trusted":true},"execution_count":82,"outputs":[{"name":"stdout","text":"Model: Xgboost\nAccuracy: 0.46\nR2_Score:0.5\n\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_34/2225540116.py:21: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n  model.fit(x_train,y_train)\n","output_type":"stream"},{"name":"stdout","text":"Model: RandomForest\nAccuracy: 0.50\nR2_Score:0.5\n\nModel: LinearRegressor\nAccuracy: 0.45\nR2_Score:0.4\n\nModel: GradientBoost\nAccuracy: 0.51\nR2_Score:0.5\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_gb.py:437: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"x=data_vl.drop([\"date\",\"pres\"],axis=1)\ny=data_vl[['pres']]\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)\nscaler = StandardScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)\nmodels={\n    \"Xgboost\":XGBRegressor(n_estimators=100),\n    \"RandomForest\":RandomForestRegressor(n_estimators=50),\n    \"LinearRegressor\":LinearRegression(),\n    \"GradientBoost\":GradientBoostingRegressor(learning_rate=0.085)\n}\nfor name,model in models.items():\n    model.fit(x_train,y_train)\n    pre=model.predict(x_test)\n    accuracy=model.score(x_test,y_test)\n    score=r2_score(y_test,pre)\n    \n    print(f\"Model: {name}\")\n    print(f\"Accuracy: {accuracy:.2f}\")\n    print(f\"R2_Score:{score:.1f}\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-05-03T14:02:44.758114Z","iopub.execute_input":"2024-05-03T14:02:44.758506Z","iopub.status.idle":"2024-05-03T14:02:45.312202Z","shell.execute_reply.started":"2024-05-03T14:02:44.758476Z","shell.execute_reply":"2024-05-03T14:02:45.310771Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stdout","text":"Model: Xgboost\nAccuracy: 0.45\nR2_Score:0.4\n\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_34/1220823305.py:15: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n  model.fit(x_train,y_train)\n","output_type":"stream"},{"name":"stdout","text":"Model: RandomForest\nAccuracy: 0.54\nR2_Score:0.5\n\nModel: LinearRegressor\nAccuracy: 0.46\nR2_Score:0.5\n\nModel: GradientBoost\nAccuracy: 0.56\nR2_Score:0.6\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_gb.py:437: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"We can do better\n","metadata":{}}]}